@* 
    Not using this page anymore. 
    Deletes are done from the Index page via popup modal dialog.
*@

@model TodoWebApp.Models.TodoItem
@{
    ViewData["Title"] = "Edit Item";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="m-0 opacity-50">@ViewData["Title"]</h1>
    <span class="pe-5 opacity-50 fs-5 text-lightblue-bottom">@ViewData["StatusMessage"]</span>
    <img src="~/images/favicon.png" alt="Logo" style="height:48px; width:auto;" asp-append-version="true" />
</div>

<form asp-action="Edit" method="post">
    <div class="mb-3">
        <label asp-for="Title" class="form-label"></label>
        <input asp-for="Title" class="form-control font-monospace" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label asp-for="Details" class="form-label"></label>
        @* We use textarea for the TodoItem.Details so we can support multiple lines and pressing [Enter]. *@
        <textarea asp-for="Details" class="form-control font-monospace" rows="10"></textarea>
        <span asp-validation-for="Details" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="LinkUrl" class="form-label"></label>
        <div class="input-group">
            <input asp-for="LinkUrl" type="url" class="form-control" placeholder="https://example.com" id="linkUrlInput" />
            <a href="#" target="_blank" id="linkPreview" class="btn btn-outline-secondary" style="display:none;">Open</a>
        </div>
        <span asp-validation-for="LinkUrl" class="text-danger"></span>
    </div>


    <div class="mb-3 form-check">
        <input asp-for="IsDone" class="form-check-input checkbox-lg-create" />
        <label asp-for="IsDone" class="form-check-label">Is it done?</label>
    </div>
    <div class="mb-3">
        <label asp-for="DueDate" class="form-label"></label>
        <input asp-for="DueDate" class="form-control" type="date" />
    </div>
@*     
    <div class="mb-3">
        <label asp-for="EntryDate" class="form-label"></label>
        <!-- readonly still posts back, so user can’t edit but the value goes to the controller -->
        <input asp-for="EntryDate" class="form-control" readonly />
        <!-- just in case you need a guaranteed POST (if disabled wouldn’t submit) -->
        <input type="hidden" asp-for="EntryDate" />
    </div>
 *@
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <label class="form-label me-2">@Html.DisplayNameFor(m => m.EntryDate)</label>
            <!-- form-control-plaintext is bootstrap’s way to render read-only data in form layout -->
            <p class="form-control-plaintext text-lightblue-top">@Model.EntryDate?.ToString("dddd, MMMM d yyyy")</p>
            <!-- We still need the value to post back to controller -->
            <input type="hidden" asp-for="EntryDate" />
        </div>

        @* Only show the completed date when relevant *@
        @if (Model.CompletedDate.HasValue)
        {
            <div class="label-completed">
                <label class="form-label">@Html.DisplayNameFor(m => m.CompletedDate)</label>
                <p class="form-control-plaintext text-lightblue-top">@Model.CompletedDate?.ToString("dddd, MMMM d yyyy")</p>
                <!-- We still need the value to post back to controller -->
                <input type="hidden" asp-for="CompletedDate" />
            </div>
        }
    </div>

    <!-- Submit any changes. -->
    <button type="submit" class="btn btn-success">Save</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

<!-- Place build and version tags at the bottom. -->
<div class="form-check form-check-reverse me-0">
    <span class="pe-1 opacity-75 fs-6 text-dim-top">@ViewData["AppVersion"]&nbsp;&nbsp;—&nbsp;&nbsp;@ViewData["AppBuild"]</span>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    @* If the controller set ShowMessagePopup, emit a script to show it *@
    @if (TempData["ShowMessagePopup"] as bool? == true)
    {
        var htmlMsg = TempData["PopupMessage"] as string;
        <text>
            <script>
                document.addEventListener("DOMContentLoaded", function()
                {
                  // Option 1: simple JS alert
                  //alert("Please fix these errors:\n\n" + "@Html.Raw(htmlMsg)".replace(/<br\/>/g, "\n"));

                  // Option 2: Bootstrap modal (if you have one in your _Layout)
                  $('#myValidationModal .modal-body').html("@Html.Raw(htmlMsg)");
                  $('#myValidationModal').modal('show');
                });
            </script>
        </text>
    }

    @* For the link preview functionality, we need to add a script that updates the link preview based on the input value. *@
    <script>
        document.addEventListener('DOMContentLoaded', () => {
          const input  = document.getElementById('linkUrlInput');
          const preview = document.getElementById('linkPreview');

          function updatePreview() {
            const url = input.value.trim();
            // basic check for http/https
            if (/^https?:\/\/\S+$/.test(url)) {
              preview.href = url;
              preview.style.display = 'inline-block';
            } else {
              preview.style.display = 'none';
            }
          }
          // update on load in case model has a value
          updatePreview();
          // update on user input
          input.addEventListener('input', updatePreview);
        });
    </script>

}