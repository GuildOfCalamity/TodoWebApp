
 [Project Structure]
═════════════════════

┌────────────────────────────────────────────────────────┐
│TodoWebApp/                                             │
├────────────────────────────────────────────────────────┘
├─ Program.cs
├─ Contants.cs
├─ appsettings.json
│
├─ Properties/
│    └─launchSettings.json
│
├─Controllers/
│    ├─TodoItemsController.cs
│    ├─HomeController.cs
│    └─ControllerExtensions.cs
│
├─Logging/
│    ├─FileLogger.cs
│    ├─FileLoggerExtensions.cs
│    └─FileLoggerProvider.cs
│
├─Models/
│    ├─AppDbContext.cs
│    ├─ErrorViewModel.cs
│    ├─StatisticsViewModel.cs
│    └─TodoItem.cs
│
├─Views/
│  ├─_ViewImports.cshtml
│  ├─_ViewStart.cshtml
│  │
│  ├─Home/
│  │    Index.cshtml
│  │    Privacy.cshtml
│  │
│  ├─Shared/
│  │    _Layout.cshtml
│  │    _ValidationScriptsPartial.cshtml
│  │    Error.cshtml
│  │
│  └─TodoItems/
│       Index.cshtml
│       Create.cshtml
│       Edit.cshtml
│       Delete.cshtml
│       Statistics.cshtml
│
└─wwwroot/
    ├─css/
    ├─images/
    ├─js/
    ├─lib/
    └─favicon.ico


 [Creating the SQL Database for first run]
=================================================================
PM> dotnet add package Microsoft.EntityFrameworkCore.Design
    
    // May not be needed if package already exists for the project

PM> dotnet tool install --global dotnet-ef

    // Needed, or you may see the error: "dotnet : Could not execute because the specified command or file was not found."

PM> dotnet ef migrations add InitialCreate
    
    // This creates the migration class modules
    // NOTE: If this step fails, ensure you have the correct DbContextOptionsBuilder in Program.cs, e.g.:
    // "builder.Services.AddDbContext<AppDbContext>(opts => opts.UseSqlServer(connectionString));"

PM> dotnet ef database update

    // This SQL script is generated by Entity Framework Core migrations.
    // These commands will create the database and the initial schema for TodoDb:

    CREATE DATABASE [TodoDb];

    IF SERVERPROPERTY('EngineEdition') <> 5
    BEGIN
        ALTER DATABASE [TodoDb] SET READ_COMMITTED_SNAPSHOT ON;
    END;

    SELECT 1

    DECLARE @result int;
    EXEC @result = sp_getapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session', @LockMode = 'Exclusive';
    SELECT @result
    IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
    BEGIN
        CREATE TABLE [__EFMigrationsHistory] (
            [MigrationId] nvarchar(150) NOT NULL,
            [ProductVersion] nvarchar(32) NOT NULL,
            CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
        );
    END;

    SELECT 1

    SELECT OBJECT_ID(N'[__EFMigrationsHistory]');

    SELECT [MigrationId], [ProductVersion]
    FROM [__EFMigrationsHistory]
    ORDER BY [MigrationId];

    CREATE TABLE [TodoItems] (
        [Id] int NOT NULL IDENTITY,
        [Title] nvarchar(100) NOT NULL,
        [Details] nvarchar(1000) NOT NULL,
        [IsDone] bit NOT NULL,
        [DueDate] datetime2 NULL,
        [EntryDate] datetime2 NULL,
        [CompletedDate] datetime2 NULL,
        CONSTRAINT [PK_TodoItems] PRIMARY KEY ([Id])
    );

    INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
    VALUES (N'20250627144813_InitialCreatec', N'9.0.6');

    DECLARE @result int;
    EXEC @result = sp_releaseapplock @Resource = '__EFMigrationsLock', @LockOwner = 'Session';
    SELECT @result


    [Example of adding the new TodoItem.LinkUrl to existing SQL DB after creating the property]
    ===========================================================================================
    PS> dotnet ef migrations add AddLinkUrlToTodoItem
    PS> dotnet ef database update
